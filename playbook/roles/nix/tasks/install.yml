---
- name: Ensure Nix is installed
  tags:
    - install
  block:
    - name: Check if Nix store exists
      ansible.builtin.stat:
        path: /nix/store
      register: nix_store

    - name: Download and install Nix
      when: not nix_store.stat.exists
      block:
        - name: Download Nix archive
          ansible.builtin.get_url:
            url: "{{ nix_install_url }}"
            dest: "{{ nix_dest_download_path }}"
            mode: '0644'

        - name: Unpack Nix
          ansible.builtin.unarchive:
            src: "{{ nix_dest_download_path }}"
            dest: /tmp/
            remote_src: true
            extra_opts: [--no-same-owner]

        - name: Set SELinux mode to permissive temporarily
          become: true
          ansible.builtin.command: setenforce 0
          register: selinux_result
          failed_when: selinux_result.rc != 0 and "SELinux is disabled" not in selinux_result.stderr
          changed_when: false

        - name: Install Nix
          ansible.builtin.command: /tmp/{{ nix_download_file_name }}/install --daemon --yes
          args:
            creates: /nix/store  # Prevent reinstallation if it already exists

    - name: Configure SELinux for Nix
      become: true
      block:
        - name: Ensure SELinux policies for Nix
          ansible.builtin.command: semodule -i /tmp/{{ nix_selinux_policy_name }}.pp
          args:
            creates: /etc/selinux/targeted/active/modules/100/nix.pp  # Prevent redundant installations

        - name: Restore SELinux labels for /nix
          ansible.builtin.command: restorecon -R /nix
          changed_when: false  # Ensure idempotency

        - name: Ensure SELinux is enforcing again
          ansible.builtin.command: setenforce 1
          when: ansible_selinux.status == "enabled"
          changed_when: false  # Only runs if necessary

    - name: Enable Nix flakes and commands globally
      become: true
      ansible.builtin.lineinfile:
        path: "{{ nix_conf_path }}"
        line: "experimental-features = nix-command flakes"
        create: true
        mode: '0644'
        owner: root
        group: root

    - name: Enable and restart Nix daemon
      become: true
      ansible.builtin.systemd:
        name: nix-daemon.service
        state: restarted
        enabled: true

    - name: Verify Nix installation
      ansible.builtin.command: nix --version
      changed_when: false
